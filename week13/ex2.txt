Recovery:
recovery is functional if it's appicable  to :
1- kill the process or 
2- preempt it's resources.
 How ever we are not allowed to use it in RT-systems or batch systems.

*Prevention:
The best strategy if the requests from processes are given.
Besides, the problem of planning is decidable. 
---------
*Avoiding is good when new requests of resources requires dynamic decisions 
that doesn't result in deadlocks. for this method, Banker's algorithm is usually used.
This approach is a good mean for interactive systems.

When deadlock happens very infrequently and data loss is insignificant, we could ignore deadlocks. But if we have information
about the system resources and can identify situations where deadlock can occur, it is better to detect such deadlocks and apply
the recovery strategy. If, in some situations (for example, a process asking for a busy resource), it is known beforehand that 
taking some action (e.g. granting resource to process) will definitely cause deadlock, it is better to avoid it by not approving
the actions that lead to a deadlock.

However, deadlock avoidance is essentially impossible, because it requires information about future requests, which is not known,
for many real systems. It is better to use prevention strategy if we know that any of the above four conditions stated by Coffman
et al. (1971) can be eliminated.
